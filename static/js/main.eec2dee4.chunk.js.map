{"version":3,"sources":["App.module.css","components/common/Button/style.module.css","components/Todolist/style.module.css","components/common/Input/Input.tsx","components/common/Button/Button.tsx","components/Todolist/Header/Header.tsx","components/Todolist/List/Task/Task.tsx","components/Todolist/List/List.tsx","components/Todolist/Footer/Footer.tsx","components/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Input","props","placeholder","Button","className","styles","button","type","value","text","Header","Task","checked","isDone","title","List","jsxElements","tasks","map","t","Footer","Todolist","todolist","App","id","v1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,OAAS,wB,gBCA3BD,EAAOC,QAAU,CAAC,SAAW,0B,uJCWdC,MANf,SAAeC,GACX,OACI,2BAAOC,YAAaD,EAAMC,e,gBCKnBC,MANf,SAAgBF,GACZ,OACI,2BAAOG,UAAWC,IAAOC,OAAQC,KAAK,SAASC,MAAOP,EAAMQ,QCJ7D,SAASC,IACZ,OACI,yBAAKN,UAAU,mBACX,wBAAIA,UAAU,0BAAd,iBACA,yBAAKA,UAAU,wBACX,kBAAC,EAAD,CAAOF,YAAY,cACnB,kBAAC,EAAD,CAAQO,KAAK,UCOdE,MAXf,SAAcV,GACV,OACI,yBAAKG,UAAU,eACX,yBAAKA,UAAU,eACX,2BAAOG,KAAK,WAAWK,QAASX,EAAMY,SACtC,8BAAOZ,EAAMa,UCJtB,SAASC,EAAKd,GAEjB,IAAIe,EAAcf,EAAMgB,MAAMC,KAAK,SAACC,GAChC,OAAO,kBAAC,EAAD,CAAML,MAAOK,EAAEL,MAAOD,OAAQM,EAAEN,YAE3C,OACI,yBAAKT,UAAU,eACVY,GCZN,SAASI,IACZ,OACI,yBAAKhB,UAAU,mBACX,kBAAC,EAAD,CAAQK,KAAK,QACb,kBAAC,EAAD,CAAQA,KAAK,cACb,kBAAC,EAAD,CAAQA,KAAK,Y,oBCIlB,SAASY,EAASpB,GACrB,OACI,yBAAKG,UAAWC,IAAOiB,UACnB,kBAACZ,EAAD,MACA,kBAACK,EAAD,CAAME,MAAOhB,EAAMgB,QACnB,kBAACG,EAAD,O,YCSGG,MAff,WACI,IAAMN,EAAyB,CAC3B,CAAEO,GAAIC,cAAMX,MAAO,MAAOD,QAAQ,GAClC,CAAEW,GAAIC,cAAMX,MAAO,KAAMD,QAAQ,GACjC,CAAEW,GAAIC,cAAMX,MAAO,QAASD,QAAQ,IAExC,OACI,yBAAKT,UAAWC,IAAOkB,KACnB,kBAACF,EAAD,CAAUJ,MAAOA,IACjB,kBAACI,EAAD,CAAUJ,MAAOA,IACjB,kBAACI,EAAD,CAAUJ,MAAOA,MCTTS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eec2dee4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2dfZr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__vXO4P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"style_todolist__3K8gM\"};","import React from \"react\";\r\n\r\ntype PropsType = {\r\n    placeholder: string\r\n}\r\n\r\nfunction Input(props: PropsType) {\r\n    return (\r\n        <input placeholder={props.placeholder}/>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\nimport styles from \"./style.module.css\"\r\n\r\ntype PropsType = {\r\n    text: string\r\n}\r\n\r\nfunction Button(props: PropsType) {\r\n    return (\r\n        <input className={styles.button} type=\"button\" value={props.text}/>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Input from \"../../common/Input/Input\";\r\nimport Button from \"../../common/Button/Button\";\r\n\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className=\"todoList-header\">\r\n            <h3 className=\"todoList-header__title\">What to Learn</h3>\r\n            <div className=\"todoList-newTaskForm\">\r\n                <Input placeholder=\"New title\"/>\r\n                <Button text=\"Add\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction Task(props: PropsType) {\r\n    return (\r\n        <div className=\"styles.list\">\r\n            <div className=\"styles.task\">\r\n                <input type=\"checkbox\" checked={props.isDone}/>\r\n                <span>{props.title}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from \"./Task/Task\";\r\nimport {TaskType} from \"../../../App\";\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nexport function List(props: PropsType) {\r\n\r\n    let jsxElements = props.tasks.map( (t) => {\r\n        return <Task title={t.title} isDone={t.isDone} />\r\n    })\r\n    return (\r\n        <div className=\"styles.list\">\r\n            {jsxElements}\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport Button from \"../../common/Button/Button\"\r\n\r\nexport function Footer() {\r\n    return (\r\n        <div className=\"todoList-footer\">\r\n            <Button text=\"All\" />\r\n            <Button text=\"Completed\" />\r\n            <Button text=\"Active\" />\r\n        </div>\r\n    )\r\n}","import {Header} from \"./Header/Header\";\r\nimport {List} from \"./List/List\";\r\nimport {Footer} from \"./Footer/Footer\";\r\nimport React from \"react\";\r\nimport {TaskType} from \"../../App\";\r\nimport styles from './style.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    return (\r\n        <div className={styles.todolist}>\r\n            <Header />\r\n            <List tasks={props.tasks}/>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}","import styles from './App.module.css';\nimport React from 'react';\nimport {Todolist} from \"./components/Todolist/Todolist\";\nimport {v1} from \"uuid\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n    const tasks: Array<TaskType> = [\n        { id: v1(), title: 'CSS', isDone: true},\n        { id: v1(), title: 'JS', isDone: true},\n        { id: v1(), title: 'React', isDone: false}\n    ]\n    return (\n        <div className={styles.App}>\n            <Todolist tasks={tasks}/>\n            <Todolist tasks={tasks}/>\n            <Todolist tasks={tasks}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n\n"],"sourceRoot":""}